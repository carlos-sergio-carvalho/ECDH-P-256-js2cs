{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Sergio/source/repos/ECDH-P-256-js2cs/ECDH-P-256-js2cs/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HomeComponent {\n  constructor(http, baseUrl) {\n    //private async setUpDFHKeys().then(() => { });\n    this.publicKeyB64 = '';\n    this.privateKeyB64 = '';\n    this.setUpDFHKeys().then(() => {\n      http.post(baseUrl + '', {\n        pkey: this.privateKeyB64\n      }).subscribe(result => {//this.forecasts = result;\n      }, error => console.error(error));\n    });\n  }\n\n  setUpDFHKeys() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var bobKey = yield window.crypto.subtle.generateKey({\n        name: 'ECDH',\n        namedCurve: 'P-256'\n      }, true, [\"deriveKey\"]);\n      var publicKeyData = yield window.crypto.subtle.exportKey(\"spki\", bobKey.publicKey);\n      var publicKeyBytes = new Uint8Array(publicKeyData);\n      /* @ts-ignore */\n\n      _this.publicKeyB64 = btoa(String.fromCharCode.apply(null, publicKeyBytes)); //console.log(\"Bob's public: \\n\" + publicKeyB64.replace(/(.{56})/g, '$1\\n'));\n\n      var privateKeyData = yield window.crypto.subtle.exportKey(\"pkcs8\", bobKey.privateKey);\n      var privateKeyBytes = new Uint8Array(privateKeyData);\n      /* @ts-ignore */\n\n      _this.privateKeyB64 = btoa(String.fromCharCode.apply(null, privateKeyBytes)); //console.log(\"Bob's private:\\n\" + privateKeyB64.replace(/(.{56})/g, '$1\\n'));\n    })();\n  }\n\n}\n\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\n\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 67,\n  vars: 0,\n  consts: [[\"href\", \"https://get.asp.net/\"], [\"href\", \"https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx\"], [\"href\", \"https://angular.io/\"], [\"href\", \"http://www.typescriptlang.org/\"], [\"href\", \"http://getbootstrap.com/\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Hello, world!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \"Welcome to your new single-page application, built with:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ul\")(5, \"li\")(6, \"a\", 0);\n      i0.ɵɵtext(7, \"ASP.NET Core\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(8, \" and \");\n      i0.ɵɵelementStart(9, \"a\", 1);\n      i0.ɵɵtext(10, \"C#\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(11, \" for cross-platform server-side code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"li\")(13, \"a\", 2);\n      i0.ɵɵtext(14, \"Angular\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(15, \" and \");\n      i0.ɵɵelementStart(16, \"a\", 3);\n      i0.ɵɵtext(17, \"TypeScript\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18, \" for client-side code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"li\")(20, \"a\", 4);\n      i0.ɵɵtext(21, \"Bootstrap\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(22, \" for layout and styling\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"p\");\n      i0.ɵɵtext(24, \"To help you get started, we've also set up:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"ul\")(26, \"li\")(27, \"strong\");\n      i0.ɵɵtext(28, \"Client-side navigation\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(29, \". For example, click \");\n      i0.ɵɵelementStart(30, \"em\");\n      i0.ɵɵtext(31, \"Counter\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(32, \" then \");\n      i0.ɵɵelementStart(33, \"em\");\n      i0.ɵɵtext(34, \"Back\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(35, \" to return here.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"li\")(37, \"strong\");\n      i0.ɵɵtext(38, \"Angular CLI integration\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(39, \". In development mode, there's no need to run \");\n      i0.ɵɵelementStart(40, \"code\");\n      i0.ɵɵtext(41, \"ng serve\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(42, \". It runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"li\")(44, \"strong\");\n      i0.ɵɵtext(45, \"Efficient production builds\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(46, \". In production mode, development-time features are disabled, and your \");\n      i0.ɵɵelementStart(47, \"code\");\n      i0.ɵɵtext(48, \"dotnet publish\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(49, \" configuration automatically invokes \");\n      i0.ɵɵelementStart(50, \"code\");\n      i0.ɵɵtext(51, \"ng build\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(52, \" to produce minified, ahead-of-time compiled JavaScript files.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(53, \"p\");\n      i0.ɵɵtext(54, \"The \");\n      i0.ɵɵelementStart(55, \"code\");\n      i0.ɵɵtext(56, \"ClientApp\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(57, \" subdirectory is a standard Angular CLI application. If you open a command prompt in that directory, you can run any \");\n      i0.ɵɵelementStart(58, \"code\");\n      i0.ɵɵtext(59, \"ng\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(60, \" command (e.g., \");\n      i0.ɵɵelementStart(61, \"code\");\n      i0.ɵɵtext(62, \"ng test\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(63, \"), or use \");\n      i0.ɵɵelementStart(64, \"code\");\n      i0.ɵɵtext(65, \"npm\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(66, \" to install extra packages into it.\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,aAAP,CAAoB;EAExBC,YAAYC,IAAZ,EAAkDC,OAAlD,EAAiE;IAajE;IACQ,oBAAoB,EAApB;IACA,qBAAwB,EAAxB;IAbN,KAAKC,YAAL,GAAoBC,IAApB,CAAyB,MAAK;MAC5BH,IAAI,CAACI,IAAL,CAAUH,OAAO,GAAG,EAApB,EAAwB;QAAEI,IAAI,EAAE,KAAKC;MAAb,CAAxB,EAAsDC,SAAtD,CAAgEC,MAAM,IAAG,CACzE;MACD,CAFC,EAECC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAFV;IAKD,CAND;EAQD;;EAOWP,YAAY;IAAA;;IAAA;MACxB,IAAIS,MAAM,SAASC,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBC,WAArB,CACjB;QAAEC,IAAI,EAAE,MAAR;QAAgBC,UAAU,EAAE;MAA5B,CADiB,EAEjB,IAFiB,EAGjB,CAAC,WAAD,CAHiB,CAAnB;MAKA,IAAIC,aAAa,SAASN,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBK,SAArB,CAA+B,MAA/B,EAAuCR,MAAM,CAACS,SAA9C,CAA1B;MACA,IAAIC,cAAc,GAAG,IAAIC,UAAJ,CAAeJ,aAAf,CAArB;MACA;;MACA,KAAI,CAACK,YAAL,GAAoBC,IAAI,CAACC,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCN,cAAhC,CAAD,CAAxB,CATwB,CAUxB;;MACA,IAAIO,cAAc,SAAShB,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBK,SAArB,CAA+B,OAA/B,EAAwCR,MAAM,CAACkB,UAA/C,CAA3B;MACA,IAAIC,eAAe,GAAG,IAAIR,UAAJ,CAAeM,cAAf,CAAtB;MACA;;MACA,KAAI,CAACtB,aAAL,GAAqBkB,IAAI,CAACC,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCG,eAAhC,CAAD,CAAzB,CAdwB,CAexB;IAfwB;EAgBzB;;AAnCyB;;;mBAAbhC,eAAaiC,0DAEc,UAFd;AAEwB;;;QAFrCjC;EAAakC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCP1BL;MAAIA;MAAaA;MACjBA;MAAGA;MAAwDA;MAC3DA,2BAAI,CAAJ,EAAI,IAAJ,EAAI,CAAJ,EAAI,GAAJ,EAAI,CAAJ;MACqCA;MAAYA;MAAKA;MAAIA;MAAiEA;MAAEA;MAAKA;MAAmCA;MACnKA,4BAAI,EAAJ,EAAI,GAAJ,EAAI,CAAJ;MAAkCA;MAAOA;MAAKA;MAAIA;MAAyCA;MAAUA;MAAKA;MAAoBA;MAC9HA,4BAAI,EAAJ,EAAI,GAAJ,EAAI,CAAJ;MAAuCA;MAASA;MAAKA;MAAsBA;MAE7EA;MAAGA;MAA2CA;MAC9CA,4BAAI,EAAJ,EAAI,IAAJ,EAAI,EAAJ,EAAI,QAAJ;MACcA;MAAsBA;MAASA;MAAqBA;MAAIA;MAAOA;MAAMA;MAAKA;MAAIA;MAAIA;MAAMA;MAAeA;MACnHA,4BAAI,EAAJ,EAAI,QAAJ;MAAYA;MAAuBA;MAASA;MAA8CA;MAAMA;MAAQA;MAAOA;MAAyJA;MACxQA,4BAAI,EAAJ,EAAI,QAAJ;MAAYA;MAA2BA;MAASA;MAAuEA;MAAMA;MAAcA;MAAQA;MAAoCA;MAAMA;MAAQA;MAAQA;MAA6DA;MAE5QA;MAAGA;MAAIA;MAAMA;MAASA;MAAQA;MAAoHA;MAAMA;MAAEA;MAAQA;MAAeA;MAAMA;MAAOA;MAAOA;MAAUA;MAAMA;MAAGA;MAAQA;MAAkCA","names":["HomeComponent","constructor","http","baseUrl","setUpDFHKeys","then","post","pkey","privateKeyB64","subscribe","result","error","console","bobKey","window","crypto","subtle","generateKey","name","namedCurve","publicKeyData","exportKey","publicKey","publicKeyBytes","Uint8Array","publicKeyB64","btoa","String","fromCharCode","apply","privateKeyData","privateKey","privateKeyBytes","i0","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Sergio\\source\\repos\\ECDH-P-256-js2cs\\ECDH-P-256-js2cs\\ClientApp\\src\\app\\home\\home.component.ts","C:\\Users\\Sergio\\source\\repos\\ECDH-P-256-js2cs\\ECDH-P-256-js2cs\\ClientApp\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n\r\n    this.setUpDFHKeys().then(() => {\r\n      http.post(baseUrl + '', { pkey: this.privateKeyB64 }).subscribe(result => {\r\n      //this.forecasts = result;\r\n    }, error => console.error(error));\r\n\r\n\r\n    });\r\n    \r\n  }\r\n\r\n\r\n  //private async setUpDFHKeys().then(() => { });\r\n  private publicKeyB64:string='';\r\n  private privateKeyB64: string = '';\r\n\r\nprivate async setUpDFHKeys() {\r\n  var bobKey = await window.crypto.subtle.generateKey(\r\n    { name: 'ECDH', namedCurve: 'P-256' },\r\n    true,\r\n    [\"deriveKey\"]\r\n  );\r\n  var publicKeyData = await window.crypto.subtle.exportKey(\"spki\", bobKey.publicKey);\r\n  var publicKeyBytes = new Uint8Array(publicKeyData);\r\n  /* @ts-ignore */\r\n  this.publicKeyB64 = btoa(String.fromCharCode.apply(null, publicKeyBytes));\r\n  //console.log(\"Bob's public: \\n\" + publicKeyB64.replace(/(.{56})/g, '$1\\n'));\r\n  var privateKeyData = await window.crypto.subtle.exportKey(\"pkcs8\", bobKey.privateKey);\r\n  var privateKeyBytes = new Uint8Array(privateKeyData);\r\n  /* @ts-ignore */\r\n  this.privateKeyB64 = btoa(String.fromCharCode.apply(null, privateKeyBytes));\r\n  //console.log(\"Bob's private:\\n\" + privateKeyB64.replace(/(.{56})/g, '$1\\n'));\r\n};\r\n}\r\n","<h1>Hello, world!</h1>\r\n<p>Welcome to your new single-page application, built with:</p>\r\n<ul>\r\n  <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n  <li><a href='https://angular.io/'>Angular</a> and <a href='http://www.typescriptlang.org/'>TypeScript</a> for client-side code</li>\r\n  <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n</ul>\r\n<p>To help you get started, we've also set up:</p>\r\n<ul>\r\n  <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n  <li><strong>Angular CLI integration</strong>. In development mode, there's no need to run <code>ng serve</code>. It runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n  <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration automatically invokes <code>ng build</code> to produce minified, ahead-of-time compiled JavaScript files.</li>\r\n</ul>\r\n<p>The <code>ClientApp</code> subdirectory is a standard Angular CLI application. If you open a command prompt in that directory, you can run any <code>ng</code> command (e.g., <code>ng test</code>), or use <code>npm</code> to install extra packages into it.</p>\r\n"]},"metadata":{},"sourceType":"module"}